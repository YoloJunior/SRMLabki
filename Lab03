def input_set(name):
    print(f"Введіть елементи множини {name}, розділені пробілами:")
    elements = input().split()
    return {int(e) for e in elements}  # створюємо множину елементів

# Операції над множинами
def union(set1, set2):
    result = {e for e in set1}.union({e for e in set2})
    return result

def intersection(set1, set2):
    result = {e for e in set1 if e in set2}
    return result

def difference(set1, set2):
    result = {e for e in set1 if e not in set2}
    return result

def symmetric_difference(set1, set2):
    result = {e for e in set1 if e not in set2}.union({e for e in set2 if e not in set1})
    return result

def cartesian_product(set1, set2):
    result = {(e1, e2) for e1 in set1 for e2 in set2}
    return result

# Перевірка підмножини та рівності
def is_subset(set1, set2):
    return all(e in set2 for e in set1)

def are_equal(set1, set2):
    return is_subset(set1, set2) and is_subset(set2, set1)

# Представлення множини як бітового рядка
def set_to_bitstring(full_set, subset):
    bitstring = ''.join(['1' if e in subset else '0' for e in sorted(full_set)])
    return bitstring

# Операції з бітовими рядками
def bitstring_union(bit1, bit2):
    return ''.join(['1' if b1 == '1' or b2 == '1' else '0' for b1, b2 in zip(bit1, bit2)])

def bitstring_intersection(bit1, bit2):
    return ''.join(['1' if b1 == '1' and b2 == '1' else '0' for b1, b2 in zip(bit1, bit2)])

def bitstring_difference(bit1, bit2):
    return ''.join(['1' if b1 == '1' and b2 == '0' else '0' for b1, b2 in zip(bit1, bit2)])

def bitstring_symmetric_difference(bit1, bit2):
    return ''.join(['1' if b1 != b2 else '0' for b1, b2 in zip(bit1, bit2)])

# Конвертація бітового рядка в множину
def bitstring_to_set(full_set, bitstring):
    return {e for i, e in enumerate(sorted(full_set)) if bitstring[i] == '1'}

# Основний код для тестування
A = input_set("A")
B = input_set("B")

print("Об'єднання A і B:", union(A, B))
print("Перетин A і B:", intersection(A, B))
print("Різниця A - B:", difference(A, B))
print("Симетрична різниця A і B:", symmetric_difference(A, B))
print("Декартовий добуток A і B:", cartesian_product(A, B))
print("A є підмножиною B:", is_subset(A, B))
print("A і B рівні:", are_equal(A, B))

# Бітові рядки
universe = A.union(B)
bit_A = set_to_bitstring(universe, A)
bit_B = set_to_bitstring(universe, B)
print("Бітовий рядок A:", bit_A)
print("Бітовий рядок B:", bit_B)

# Операції над бітовими рядками
bit_union = bitstring_union(bit_A, bit_B)
bit_intersection = bitstring_intersection(bit_A, bit_B)
bit_difference = bitstring_difference(bit_A, bit_B)
bit_symmetric_difference = bitstring_symmetric_difference(bit_A, bit_B)

# Конвертація бітових рядків назад у множини
print("Об'єднання (бітові):", bitstring_to_set(universe, bit_union))
print("Перетин (бітові):", bitstring_to_set(universe, bit_intersection))
print("Різниця (бітові):", bitstring_to_set(universe, bit_difference))
print("Симетрична різниця (бітові):", bitstring_to_set(universe, bit_symmetric_difference))
